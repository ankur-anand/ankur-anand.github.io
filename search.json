[{"title":"Understanding Object Mechanism in Python. Part - 1","url":"http://ankuranand.xyz/2016/04/23/Object-Mechanism-in-Python-part1/","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><blockquote>\n<p>This is first part in the series of <a href=\"/categories/Python-Object-Mechanism/\">object mechanism in python</a> and assumes that people reading this are familiar with the basic python and is comfortable in reading some C code</p>\n</blockquote>\n<p>When we say object the human mind , makes an image of this in a comparative concept but for computer, the object is actually an abstract concept. It doesn’t understand anything apart from bytes. So on computer the object is just an allocated space which may be continuous or may be discrete, and this whole region of memory is what we consider and object.</p>\n<p>In <strong>Python everything is an object</strong>, and since the python has been implemented in the ANSI C, Which is not an object- oriented language, so how the object mechanism has been achieved in python is really amazing.</p>\n<h2 id=\"PyObject\"><a href=\"#PyObject\" class=\"headerlink\" title=\"PyObject\"></a>PyObject</h2><p>Cometh the hour Cometh the <code>PyObject</code> the core of the python object mechanism. In Python, </p>\n<blockquote>\n<p>The structure of the object is on heap, <strong>exception being the <code>type object</code>,</strong> which is statically initialized</p>\n</blockquote>\n<p>objects do not float around in memory; once created and allocated the size and address of the object doesn’t change, so object that need to accommodate variable length data can only maintain a pointer to a variable-size memory region within the object as it makes the object maintenance work very simple</p>\n<h2 id=\"Understanding-PyObject\"><a href=\"#Understanding-PyObject\" class=\"headerlink\" title=\"Understanding PyObject\"></a>Understanding PyObject</h2><p>Here the structure of the <code>PyObject</code> that forms the core foundation of Python Object Mechanism. It’s defined in the <code>object.h</code> file of Python Core Library</p>\n<p><strong>For objects that does not contain variable length data</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _object &#123;</span><br><span class=\"line\">    PyObject_HEAD</span><br><span class=\"line\">&#125; PyObject;</span><br></pre></td></tr></table></figure></p>\n<p><strong>For objects that contain variable length data</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    PyObject_VAR_HEAD</span><br><span class=\"line\">&#125; PyVarObject;</span><br></pre></td></tr></table></figure></p>\n<p>And the macros definition of <code>PyObject_HEAD</code> and <code>PyObject_VAR_HEAD</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* PyObject_HEAD defines the initial segment of every PyObject. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PyObject_HEAD           /</span></span><br><span class=\"line\">  _PyObject_HEAD_EXTRA        /</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ob_refcnt;          /</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> _typeobject *ob_type;</span><br></pre></td></tr></table></figure></p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PyObject_VAR_HEAD       /</span></span><br><span class=\"line\">  PyObject_HEAD           /</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ob_size; <span class=\"comment\">/* Number of items in variable part */</span></span><br></pre></td></tr></table></figure>\n<p>As it can be seen, whether it’s a variable size Python Object (<code>PyVarObject</code>) or or fixed size Python Object (<code>PyObject</code>), the <code>PyObject_HEAD</code> remains the same, and this makes the reference to objects very unified, We only need a <code>PyObject*</code> and we can reference any object.</p>\n<h2 id=\"Reference-Counting-Mechanism\"><a href=\"#Reference-Counting-Mechanism\" class=\"headerlink\" title=\"Reference Counting Mechanism\"></a>Reference Counting Mechanism</h2><p>The Integer variable <code>int ob_refcnt</code> implements the reference counting mechanism. For an object A, Whenever there is new <code>PyObject*</code> reference the reference count of A is increased, and whenever it’s is reduced the reference count should be decreased. If count reaches 0, A can be removed from the heap.</p>\n<p>For Example when we write <code>a = b = c = []</code> we create one list and give it three different names. I.e we have bounded the newly instantiated list object to three different identifiers and binding is one of the way to increase the referent’s reference count.</p>\n<p>Let’s us demonstrate this.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> ctypes</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_reference_count</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  <span class=\"string\">\"\"\" Function takes the object as input and returns the </span><br><span class=\"line\"><span class=\"meta\">... </span>  total number of reference count to it \"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  <span class=\"keyword\">return</span> ctypes.c_size_t.from_address(id(obj))</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l = [<span class=\"number\">234</span>,<span class=\"number\">567</span>,<span class=\"number\">99999</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count= get_ref(l)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count</span><br><span class=\"line\">c_ulong(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l1 = l</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count</span><br><span class=\"line\">c_ulong(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> l</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count</span><br><span class=\"line\">c_ulong(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"PYObject-VAR-HEAD\"><a href=\"#PYObject-VAR-HEAD\" class=\"headerlink\" title=\"PYObject_VAR_HEAD\"></a>PYObject_VAR_HEAD</h2><p>For the variable length Object, the PyObject are usually container which holds the total number of elements that the container is going to contain in the <code>ob_size</code> variable</p>\n<h2 id=\"Going-Further\"><a href=\"#Going-Further\" class=\"headerlink\" title=\"Going Further\"></a>Going Further</h2><p>In Part 2<br>The Type of Object Mechanism of the PyObject_HEAD<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> _typeobject *ob_type</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Private members are not private to instance in Java","url":"http://ankuranand.xyz/2016/04/23/private-access-in-java/","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>We all know to access the private member variable of a class we need an public helper function in Java.</p>\n<h3 id=\"The-Unforeseen\"><a href=\"#The-Unforeseen\" class=\"headerlink\" title=\"The Unforeseen\"></a>The Unforeseen</h3><p>But seems One Object can access a private variable of another object of the same class.</p>\n<blockquote>\n<p>Private means “private to the class”, NOT “private to the object.<br>So two Object of the same class could access each other’s private member variable directly</p>\n</blockquote>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> privateNum;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FirstClass</span><span class=\"params\">(<span class=\"keyword\">int</span> privateNum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.privateNum = privateNum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a method that will change the private variable</span></span><br><span class=\"line\">  <span class=\"comment\">// of the object that is passed as parameter</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeNum</span><span class=\"params\">(FirstClass Obj)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Obj.privateNum = <span class=\"number\">100</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// A working Example</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...strings)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Creating a first class object</span></span><br><span class=\"line\">    FirstClass fc1 = <span class=\"keyword\">new</span> FirstClass(<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// as we are inside the same class we can</span></span><br><span class=\"line\">    <span class=\"comment\">// access the private variable</span></span><br><span class=\"line\">    System.out.println(fc1.privateNum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// lets create a new Obect of the First class</span></span><br><span class=\"line\">    FirstClass fc2 = <span class=\"keyword\">new</span> FirstClass(<span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// changing the value of the privateNum in the fc1 instance</span></span><br><span class=\"line\">    <span class=\"comment\">// from the fc2 instance</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    fc2.changeNum(fc1);</span><br><span class=\"line\">    System.out.println(fc1.privateNum);</span><br><span class=\"line\">    <span class=\"comment\">// Hola the output is 100</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Why-we-should-know-this\"><a href=\"#Why-we-should-know-this\" class=\"headerlink\" title=\"Why we should know this\"></a>Why we should know this</h3><p>So Java private access modifier means only private for a class. The instance of this class can access the private members of another instance of that class without any helper method and this features allow us to write methods that accept an instance of the class as an arguments for <code>equals(Object other)</code>, <code>compareTo(Object other)</code> without relying on the class having non private getters for all the  private properties that need to be accessed.</p>\n<h3 id=\"Example-code-for-equals\"><a href=\"#Example-code-for-equals\" class=\"headerlink\" title=\"Example code for equals\"></a>Example code for equals</h3><p>We often write code like this while overriding the <code>equals</code> methods in Java Class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Overriding equals() to compare two FirstClass object based on the value of </span></span><br><span class=\"line\"><span class=\"comment\">// privateNum</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// If the object is compared with itself then return true  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* Check if o is an instance of FirstClass or not</span><br><span class=\"line\">          \"null instanceof [type]\" also returns false */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> FirstClass)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// typecast o to FirstClass so that we can compare data members </span></span><br><span class=\"line\">        FirstClass c = (FirstClass) o;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Compare the data members and return accordingly </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.privateNum == c.privateNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So remember <strong>private means private to class not to instance of that class</strong></p>\n"},{"title":"Self Note on Eulerian Path","url":"http://ankuranand.xyz/2016/04/21/eulerian-path/","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>Eulerian Path are paths that</p>\n<ol>\n<li>Start at some node</li>\n<li>Visit every node exactly once</li>\n<li>And ends</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ankuanand/Blogs-Image/master/eulerian1.png\" alt=\"Eulerian paths\"></p>\n<p>For the above Diagram We can start at some node for example say<br>We starts at node <strong>D</strong><br>The next criteria is Visit every node exactly once</p>\n<p>In the above graph we can transverse in any manner. I’m transversing in following manner.</p>\n<blockquote>\n<p>D -&gt; B -&gt; A -&gt; D -&gt; C -&gt; A</p>\n</blockquote>\n<p>So in the above we have an Eulerian path that started at D and ended at A</p>\n<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><blockquote>\n<p>If a graph is connected and have a two node with even degree, than it has an<br>Eulerian path.</p>\n</blockquote>\n<p>As seen from above example the starting and ending node D and A has an odd degree.</p>\n<p>If Graph has all odd degree that graph can’t have a Eulerian Path</p>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><blockquote>\n<p>If all the node is of even degree</p>\n</blockquote>\n<p>For example<br>The below graph has an Eulerian Path even when all of it’s node is even</p>\n<p><img src=\"https://raw.githubusercontent.com/ankuanand/Blogs-Image/master/even%20eulerian.png\" alt=\"Even Eulerian\"></p>\n<p>Transverse</p>\n<blockquote>\n<p>A -&gt; B -&gt; C -&gt; E -&gt; B -&gt; D -&gt; C -&gt; A </p>\n</blockquote>\n<p>We start and end up at the same node so the node should have a even degree<br>This is special kind of the Eulerian Path and this is known as <strong>Eulerian Tour</strong></p>\n"},{"title":"Efficient Factorial Algorithm","url":"http://ankuranand.xyz/2016/04/19/EFFICIENT-FACTORIALS-ALGORITHMS/","content":"<h2 id=\"Factorial\"><a href=\"#Factorial\" class=\"headerlink\" title=\"Factorial -\"></a>Factorial -</h2><p>In mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers<br>less than or equal to n. For example,</p>\n<p>$$ 5! = 5 \\ast 4 \\ast 3 \\ast 2 \\ast 1 = 120 $$</p>\n<h3 id=\"Recursive-Approach\"><a href=\"#Recursive-Approach\" class=\"headerlink\" title=\"Recursive Approach:\"></a>Recursive Approach:</h3><p>Based on the recurrence relation</p>\n<p>$$ n! = \\begin{cases}<br>1 &amp; \\text{if n = 0},\\<br>(n-1)! \\ast n &amp; \\text{if n &gt; 0}<br> \\end{cases} $$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_recursive</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span><br><span class=\"line\">    This function takes one agruments and</span><br><span class=\"line\">    returns the factorials of that number</span><br><span class=\"line\">    This is naive recursive approach</span><br><span class=\"line\">    '''</span></span><br><span class=\"line\">    <span class=\"comment\">#base case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">1</span> <span class=\"keyword\">or</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> number * calculate_factorial_recursive(number - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>The Recursive approach is not the best approach. It will give RuntimeError: maximum recursion depth exceeded.<br>For large number as python doesn’t have optimized <a href=\"https://en.wikipedia.org/wiki/Tail_call\" target=\"_blank\" rel=\"external\">tail recursion</a>, but it have been written for pedagogical purposes, to illustrate the effect of several fundamental algorithmic optimizations in the n factorial of a very large number.</p>\n<h3 id=\"First-Improvement\"><a href=\"#First-Improvement\" class=\"headerlink\" title=\"First Improvement :\"></a>First Improvement :</h3><h3 id=\"Successive-Multiplicative-Approach\"><a href=\"#Successive-Multiplicative-Approach\" class=\"headerlink\" title=\"Successive Multiplicative Approach.\"></a>Successive Multiplicative Approach.</h3><p>This function uses the approach successive multiplication like<br>$$ 8! = 8 \\ast 7 \\ast 6 \\ast 5 \\ast 4 \\ast 3 \\ast 2 \\ast 1 $$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_multi</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">1</span> <span class=\"keyword\">or</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result = <span class=\"number\">1</span> <span class=\"comment\"># variable to hold the result</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, number + <span class=\"number\">1</span>, <span class=\"number\">1</span>):</span><br><span class=\"line\">        result *= x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>The profiled result for this function :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n = 1000 -- Total time: 0.001115 s</span><br><span class=\"line\">for n = 10000 -- Total time: 0.035327 s</span><br><span class=\"line\">for n = 100000 -- Total time: 3.77454 s.</span><br></pre></td></tr></table></figure>\n<p>Now If we see the result from line_profiler we will see that most %time was spent in multiplication step of the above code i.e result *= x which is almost 98%.</p>\n<h3 id=\"Second-Improvement\"><a href=\"#Second-Improvement\" class=\"headerlink\" title=\"Second Improvement :\"></a>Second Improvement :</h3><h3 id=\"Reduce-the-number-of-successive-multiplication\"><a href=\"#Reduce-the-number-of-successive-multiplication\" class=\"headerlink\" title=\"Reduce the number of successive multiplication\"></a>Reduce the number of successive multiplication</h3><p>As the multiplication is very costly especially for a large number , we can use the pattern and reduces the number of multiplication by half. Lets group the above 8! example $ 8! = 8 \\ast 7 \\ast 6 \\ast 5 \\ast 4 \\ast 3 \\ast 2 \\ast 1  $- together: $ 8! = (8 \\ast 1) \\ast (7 \\ast 2) \\ast (6 \\ast 3) \\ast (5 \\ast 4) $ which can be written as $$ 8! = 8 \\ast (8 + 6 = 14) \\ast (14 + 4 = 18) \\ast (18 + 2).$$<br>so first factor is the number we are taking. second factor is the first factor plus first factor minus two from the factor and then in next we multiply the result with added result. Odd number also follows the same pattern till even just handle the case of one odd.<br>Code to do the same:<br><figure class=\"highlight python\"><figcaption><span>:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_multi_half</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> number == <span class=\"number\">1</span> <span class=\"keyword\">or</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">       handle_odd = <span class=\"keyword\">False</span></span><br><span class=\"line\">       upto_number = number</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> number &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">           upto_number -= <span class=\"number\">1</span></span><br><span class=\"line\">           <span class=\"keyword\">print</span> upto_number</span><br><span class=\"line\">           handle_odd = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">       next_sum = upto_number</span><br><span class=\"line\">       next_multi = upto_number</span><br><span class=\"line\">       factorial = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">while</span> next_sum &gt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">           factorial *= next_multi</span><br><span class=\"line\">           next_sum -= <span class=\"number\">2</span></span><br><span class=\"line\">           next_multi += next_sum</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> handle_odd:</span><br><span class=\"line\">           factorial *= number</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> factorial</span><br></pre></td></tr></table></figure></p>\n<p>The profiled result for this function :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For n = 1000 -- Total time: 0.00115 s</span><br><span class=\"line\">for n = 10000 -- Total time: 0.023636 s</span><br><span class=\"line\">for n = 100000 -- Total time: 3.65019 s</span><br></pre></td></tr></table></figure>\n<p>It is not optimised very much, but are at least not obscenely slow. It’s shows some improvement in the mid range but didn’t improved much with scaling. In this function too most of the %time is spent on multiplication:<br>Java Code for the same:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">calculateFactorial</span><span class=\"params\">(<span class=\"keyword\">int</span> uptoValue)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger answer=BigInteger.ONE;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> oddUptoValue=((uptoValue&amp;<span class=\"number\">1</span>)==<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempUptoValue=uptoValue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oddUptoValue)&#123;</span><br><span class=\"line\">            tempUptoValue=uptoValue-<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextSum = tempUptoValue;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextMulti = tempUptoValue;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nextSum &gt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            answer=answer.multiply(BigInteger.valueOf(nextMulti));</span><br><span class=\"line\">            nextSum -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            nextMulti += nextSum;</span><br><span class=\"line\">        <span class=\"comment\">//  long product=(tempUptoValue-i+1L)*i;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oddUptoValue)&#123;</span><br><span class=\"line\">            answer=answer.multiply(BigInteger.valueOf(uptoValue));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(answer);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Further-Improvement\"><a href=\"#Further-Improvement\" class=\"headerlink\" title=\"Further Improvement :\"></a>Further Improvement :</h3><h3 id=\"Using-prime-decomposition\"><a href=\"#Using-prime-decomposition\" class=\"headerlink\" title=\"Using prime decomposition\"></a>Using <a href=\"https://en.wikipedia.org/wiki/Integer_factorization\" target=\"_blank\" rel=\"external\">prime decomposition</a></h3><p>to reduce the total number of multiplication Since there are $$ \\frac {number} {\\ln number} $$ prime number smaller than number so we can further reduce the total number of multiplication</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_prime_decompose</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    prime = [<span class=\"keyword\">True</span>]*(number + <span class=\"number\">1</span>)</span><br><span class=\"line\">    result = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange (<span class=\"number\">2</span>, number+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> prime[i]:</span><br><span class=\"line\">            <span class=\"comment\">#update prime table</span></span><br><span class=\"line\">            j = i+i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &lt;= number:</span><br><span class=\"line\">                prime[j] = <span class=\"keyword\">False</span></span><br><span class=\"line\">                j += i</span><br><span class=\"line\">            sum = <span class=\"number\">0</span></span><br><span class=\"line\">            t = i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> t &lt;= number:</span><br><span class=\"line\">                sum += number/t</span><br><span class=\"line\">                t *= i</span><br><span class=\"line\">            result *= i**sum</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The profiled result for this function :</span><br><span class=\"line\">n = 1000 -- Total time = 0.007484 s</span><br><span class=\"line\">n = 10000 -- Total time = 0.061662 s</span><br><span class=\"line\">n = 100000 -- Total time = 2.45769 s</span><br></pre></td></tr></table></figure>\n<p>You can see the detailed profiled result of all the discussed algorithms prepared here, in case if you want to see.<br><a href=\"https://github.com/ankur-anand/Factorial-Algorithm\" target=\"_blank\" rel=\"external\">Github Link</a></p>\n"}]