[{"title":"Call By Sharing","url":"http://ankuranand.xyz/2016/05/10/Understanding-Call-By-Sharing/","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>We all are familiar with the <code>pass by value or call by value</code> and <code>pass by reference or call by reference</code> and how does one programming language evaluates this depends upon the  <a href=\"https://en.wikipedia.org/wiki/Evaluation_strategy\" target=\"_blank\" rel=\"external\">Evaluation Strategy</a> specified by that programming language. But in the mist of these two terms we have missed an important aspect of this strategy what is known as <code>call by sharing</code>.</p>\n<h2 id=\"Understanding-Call-By-Sharing\"><a href=\"#Understanding-Call-By-Sharing\" class=\"headerlink\" title=\"Understanding Call By Sharing\"></a>Understanding <code>Call By Sharing</code></h2><p>Let’s see what is.</p>\n<h3 id=\"Call-by-Value\"><a href=\"#Call-by-Value\" class=\"headerlink\" title=\"Call by Value\"></a>Call by Value</h3><p>We all have seen code like this in <code>C</code>.<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fuc</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%u\\n\"</span>, &amp;a );</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%u\\n\"</span>, &amp;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b = <span class=\"number\">30</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%u\\n\"</span>, &amp;a);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%u\\n\"</span>, &amp;b);</span><br><span class=\"line\">  fuc(a,b);</span><br><span class=\"line\">  return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The Output on my machine:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3441025176</span><br><span class=\"line\">3441025180</span><br><span class=\"line\">3441025148</span><br><span class=\"line\">3441025144</span><br></pre></td></tr></table></figure>\n<p>As you can see that in <code>call by value</code> the value gets copied(new address for new location of value). <strong>But this approach becomes a bit problematic in term of performance issue when function arguments is not primitive value, but a complex structure like <code>struct</code></strong></p>\n<p>Example:<br>For People who are not familiar with <code>C</code> Think <code>struct</code> as a class of <code>OOP</code> without any method in it.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> point3D</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\"> <span class=\"keyword\">int</span> z;</span><br><span class=\"line\">&#125;point_3D;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fuc</span><span class=\"params\">(Struct a)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%u\\n\"</span>, &amp;a );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  point_3D point = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%u\\n\"</span>, &amp;point); <span class=\"comment\">// get the address of the very first element</span></span><br><span class=\"line\">  fuc(point);</span><br><span class=\"line\">  return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The Output is as follow<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1197172472</span><br><span class=\"line\">1197172440</span><br></pre></td></tr></table></figure></p>\n<p>As you can see each individual members gets a new memory address, which can lead to serious performance issue in term of memory while using large number of structure.</p>\n<h3 id=\"Call-by-Reference\"><a href=\"#Call-by-Reference\" class=\"headerlink\" title=\"Call by Reference\"></a>Call by Reference</h3><p>In turn the <code>pass by reference</code> receives not a value copy, but the address directly related with object from the outside. Any Change of parameter inside the function <strong>even assignment of new value</strong> is affected on object outside. As the exact address of this object is related with formal parameter.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span>* b)</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> temp = *a;</span><br><span class=\"line\">*a = *b;</span><br><span class=\"line\">*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">  swap(&amp;a, &amp;b);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>,a, b );</span><br><span class=\"line\">  return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Output:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20 10</span><br></pre></td></tr></table></figure></p>\n<p>We can see that the a and b outside the swap function gets affected.</p>\n<h3 id=\"Call-By-Sharing\"><a href=\"#Call-By-Sharing\" class=\"headerlink\" title=\"Call By Sharing\"></a>Call By Sharing</h3><p>We often hear a common phrase that</p>\n<blockquote>\n<p>Objects are passed by reference; primitives are passed by value.</p>\n</blockquote>\n<p>Lets have a look a following Python code (Even though the Example has been illustrated in Python for Simplicity the same hold true for some other language like <code>Java</code> and <code>JavaScript</code> code sample below):</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mutateX</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  alist.append(<span class=\"string\">\"Python List is Mutable\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mutateX(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[<span class=\"string\">'Python List is Mutable'</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>Since everything in Python is an <code>Object</code> We can argue that the above behavior is as expected as we will get from the <code>pass by reference</code>.</p>\n<p>Ok How about this behavior in case of <code>assignment</code>:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reref</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  alist=&#123;<span class=\"string\">'a'</span>:<span class=\"number\">65</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>reref(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[<span class=\"string\">'Python List is Mutable'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>Even Though we modified the <code>mutable</code> list object into a <code>dictionary</code> but the <code>x</code> is still a <code>list</code> object. (If it would have been call by reference the x should now point to a dictionary) Why so ?</p>\n<p>Lets Dig a little bit.</p>\n<p>As Python Implements a <a href=\"http://localhost:4000/2016/04/23/Object-Mechanism-in-Python-part1/#Reference-Counting-Mechanism\" target=\"_blank\" rel=\"external\">Reference Counting Mechanism</a> which count the number of times an Object has been referred.</p>\n<p>For Example<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a=<span class=\"number\">0x1234</span> <span class=\"comment\"># large value as small value gets pooled</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getrefcount(a)</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getrefcount(a)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c=b</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getrefcount(a)</span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\"><span class=\"number\">4660</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"number\">4660</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\"><span class=\"number\">4660</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>When we write <code>a=0x1234</code> an <code>Integer Object</code> is created and <code>a</code> gets reference to it(precisely bind it to name ‘a’). But do you see that for each other assignment the reference count of the <code>Integer object</code> gets bumped up.</p>\n<p><strong>Understanding Why we get ref count more than 1 initially.</strong><br>Here is the what  <a href=\"https://docs.python.org/2/library/sys.html#sys.getrefcount\" target=\"_blank\" rel=\"external\">Python Doc</a></p>\n<blockquote>\n<p>The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to  getrefcount().</p>\n</blockquote>\n<p>means that when we call getrefcount(), the <code>reference is copied by value into the function&#39;s\narguments</code>, temporarily bumping up the object’s reference count.</p>\n<p>Remember the Term <strong>Reference is copied by value into the function’s arguments</strong> because this plays an important role in <code>call by sharing</code></p>\n<p>Assigning b to another object decreases the reference count.Also since Integer is immutable in python we can’t change what initial value of b was. we can just rebind it to another Object.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b=<span class=\"number\">0x12345</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getrefcount(a)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>That’s What happens when you pass an argument to a function the <strong>Reference is Copied by value</strong>. </p>\n<p>As you can see below<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mutateX</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  alist.append(<span class=\"string\">\"Python List is Mutable\"</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mutateX(x)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[<span class=\"string\">'Python List is Mutable'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getrefcount(x)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>The <code>x</code> reference count becomes <code>3</code> one higher than what expected because the <code>alist</code> gets a copied reference,like <code>alist=x=[]</code>.<br>But what happens in the case of <code>assignment</code> we detached the from <code>alist=[]</code> to <code>alist={&#39;a&#39;:65}</code>. Due to this the x i.e <code>list []</code> never got modified.</p>\n<p>Sample JavaScript Code</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutate</span>(<span class=\"params\">obj</span>)</span>&#123;</span><br><span class=\"line\">... obj.name = <span class=\"string\">'Mutated'</span>;</span><br><span class=\"line\">... &#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> my_color = &#123;</span><br><span class=\"line\">... name : <span class=\"string\">'Blue'</span>&#125;;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; my_color</span><br><span class=\"line\">&#123; name: <span class=\"string\">'Blue'</span> &#125;</span><br><span class=\"line\">&gt; mutate(my_color)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; my_color</span><br><span class=\"line\">&#123; name: <span class=\"string\">'Mutated'</span> &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<p>Since We passed the mutable object the JavaScript will mutate it in the above.<br>But in the case of assignment and immutable object the changes won’t reflect to the caller as in below case.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chanageColor</span>(<span class=\"params\">col</span>)</span>&#123;</span><br><span class=\"line\">... col = <span class=\"string\">'red'</span>;</span><br><span class=\"line\">... &#125;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> colr = <span class=\"string\">'green'</span>;</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; chanageColor(colr)</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; colr</span><br><span class=\"line\"><span class=\"string\">'green'</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Curious-Case-of-Java\"><a href=\"#The-Curious-Case-of-Java\" class=\"headerlink\" title=\"The Curious Case of Java\"></a>The Curious Case of <code>Java</code></h2><p>Java is also <code>Call by Sharing</code>. May be <code>pass by value where value is the reference copy</code> describes the Evaluation Strategy better in <code>Java</code> than simply saying <code>Java</code> is always pass by value.</p>\n"},{"title":"Understanding JavaScript. Part-2","url":"http://ankuranand.xyz/2016/05/04/Understanding-JavaScript-part2/","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><blockquote>\n<p>This is Second part in the series of <a href=\"/categories/Understanding-JavaScript/\">Understanding JavaScript</a> and assumes that people reading this are familiar with Some JavaScript.</p>\n</blockquote>\n<p>In the <a href=\"/2016/04/24/Understanding-JavaScript-part1/\">first part</a> we talked about the <code>Execution Context</code> and how every time a function is invoked a new <code>Execution Context</code> is Created. In this post we are going to see how this execution context affects the <code>this</code> keyword in JavaScript.</p>\n<h2 id=\"Why-it-is-important\"><a href=\"#Why-it-is-important\" class=\"headerlink\" title=\"Why it is important ?\"></a>Why it is important ?</h2><p>We have seen in the <a href=\"/2016/04/24/Understanding-JavaScript-part1/\">first part</a> that whenever a new <code>Execution Context</code> is created the JavaScript Engine creates certain things for us, like <em>Variable Environment</em>, <em>Reference to outer Lexical Environment</em> (Lexical Environment is the Environment Where it sits physically in the code and as this tailors the variable lookup Scope chain, i.e if i ask for a variable and it is not there it will go out to next Lexical Environment till the <code>Global Execution Environment</code> looking for that variable) and also gives us this variable called <code>this</code> and <code>this</code> will be pointing at different <em>Object</em> depending on how the function is invoked.</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h2><p>In the below code the <code>this</code> keyword which is immediately available will point to global Object i.e inside browser it will be <code>window</code> Object.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Understanding JavaScript. Part-1","url":"http://ankuranand.xyz/2016/04/24/Understanding-JavaScript-part1/","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><blockquote>\n<p>This is first part in the series of <a href=\"/categories/Understanding-JavaScript/\">Understanding JavaScript</a> and assumes that people reading this are familiar with Some JavaScript</p>\n</blockquote>\n<p>Every time when control is transferred to ECMAScript executable code, control is entered an execution context.</p>\n<blockquote>\n<p>Execution context (abbreviated form — EC) is the abstract concept used by ECMAspecification for typification and differentiation of an executable code.</p>\n</blockquote>\n<p>Whenever Code is run in JavaScript it is run inside an <code>Execution Context</code> and the base <code>Execution Context</code> is the <code>Global Execution Context</code>. On the top of <code>Global Execution Context</code> there may be more <code>Execution Context</code>, and all of them lives in the Execution Stack</p>\n<h2 id=\"Execution-Context\"><a href=\"#Execution-Context\" class=\"headerlink\" title=\"Execution Context\"></a>Execution Context</h2><p>The <em>Global Execution Context</em> creates two things for you<br>    <em>Global Object (Object is just a collection of name value pair)\n    </em><code>this</code> (a special variable)</p>\n<p>and these two things are created by the JavaScript Engine</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">this</span></span><br><span class=\"line\">Window &#123;external: <span class=\"built_in\">Object</span>, chrome: <span class=\"built_in\">Object</span>, <span class=\"built_in\">document</span>: <span class=\"built_in\">document</span>, digits: <span class=\"string\">\"0123456789\"</span>, phoneNumberDelimiters: <span class=\"string\">\"()- \"</span>…&#125;</span><br></pre></td></tr></table></figure>\n<p>The Output from the console of browser and here the global object is <code>Window</code></p>\n<p>In <em>Node.js</em> environment the global object is different <code>{ global: [Circular],\n  process:..................</code></p>\n<p>Note:- There is always a <code>Global Object</code> created by the JavaScript Engine for you along with special variable <code>this</code> and at the Global Level these two things are equals</p>\n<p><strong>Remember Global in JavaScript just means “Not Inside a Function”</strong></p>\n<p>Suppose we have these lines of code in js file<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>When the js file is executed the <code>window.a</code> will print “Hello World”. <em>So the variable and function when lexically not sitting inside a function they are just sitting inside the Global Object</em></p>\n<p>So When the code is executed the Execution Context is Created and here the things that are created<br><img src=\"https://raw.githubusercontent.com/ankuanand/Blogs-Image/master/Execution%20Context.png\" alt=\"Execution Context\"></p>\n<p>The <code>Outer Environment</code> refers to <code>null</code> for Global Objects</p>\n<h3 id=\"Creation-and-Hoisting\"><a href=\"#Creation-and-Hoisting\" class=\"headerlink\" title=\"Creation and Hoisting\"></a>Creation and Hoisting</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b(); <span class=\"comment\">// called b</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// Undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code doesn’t give any error and why it happen we are going to discuss that now</p>\n<p>In JavaScript Execution Context is Created in two phases</p>\n<h4 id=\"Creation-Phase\"><a href=\"#Creation-Phase\" class=\"headerlink\" title=\"Creation Phase:\"></a>Creation Phase:</h4><p>In Creation Phase it’s creates <em>Global Object</em>,<em>this</em>,<em>Outer Environment</em> and <em>Setup Memory Space for Variables and Functions that you have created in the entire code base</em> so that function and variables exist in the memory and when that code begin execute line by line it can excess them and it’s that step that somewhat is known as “Hoisting”</p>\n<p><img src=\"https://raw.githubusercontent.com/ankuanand/Blogs-Image/master/creationphase.png\" alt=\"Execution Context Creation Phase\"></p>\n<p>However when it comes <code>variable</code> it is little bit different, While whole functions always sits in the memory(means all the code that’s why we got output <code>called b</code> when function was called in the above code). For variable the JavaScript Engine doesn’t know what the value of the variable is going to be until it enter into the second phase i.e <a href=\"#Execution-Phase\">Execution Phase</a>.So Instead it set is as <code>Undefined</code>.</p>\n<p><strong>All JavaScript Variables are initially set to undefined</strong></p>\n<h4 id=\"Execution-Phase\"><a href=\"#Execution-Phase\" class=\"headerlink\" title=\"Execution Phase\"></a>Execution Phase</h4><p>It’s is in this phase that the value to the names of variables are assigned. Rest of time it is undefined</p>\n<p>And this concept applies in all the Execution Context of JavaScript</p>\n<p>For Example<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'called b'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b();</span><br></pre></td></tr></table></figure></p>\n<p>The output is<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">called b</span><br></pre></td></tr></table></figure></p>\n<p><strong>Note : Never relies on Hoisting</strong></p>\n<p>In <a href=\"/2016/05/04/Understanding-JavaScript-part2/\">Part-2</a> we will be discussing about <code>this</code> variable.</p>\n"},{"title":"Don't use Mutable as default Parameter in Python functions","url":"http://ankuranand.xyz/2016/04/24/Dont-use-mutable-as-defualt-parameter/","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><blockquote>\n<p>Examples use <code>python3</code> for <code>python2</code> use <code>func_defaults</code></p>\n</blockquote>\n<p>We frequently use <code>[]</code> as default parameter.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(a=[])</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>foo.__defaults__</span><br><span class=\"line\">([],)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>But this is not a good practice as this lead to debugging <a href=\"https://en.wikipedia.org/wiki/Rabbit_hole\" target=\"_blank\" rel=\"external\">rabbit hole</a></p>\n<h2 id=\"Understanding-Why\"><a href=\"#Understanding-Why\" class=\"headerlink\" title=\"Understanding Why ?\"></a>Understanding Why ?</h2><p><em>The Default parameters are initialized during function definition time</em> which occur at either module load time or during program execution. As we can see in the above example the <code>foo</code> function was defined and it’s default parameter shows the value of list which is empty <code>([],)</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(items, seq=[])</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> item &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">      seq.append(item)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> seq</span><br></pre></td></tr></table></figure>\n<p>Till now the only item in the <code>__defaults__</code> is an empty list as can be seen</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(foo.__defaults__) <span class=\"comment\"># ([],)</span></span><br></pre></td></tr></table></figure>\n<p>After first Invocation<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(foo([<span class=\"number\">2</span>])) <span class=\"comment\"># [2]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(foo.__defaults__) <span class=\"comment\"># ([2],)</span></span><br></pre></td></tr></table></figure></p>\n<p>From the output we can see that now the <code>__defaults__</code> doesn’t shows that the default for seq which should be an empty list and this leads to <code>error</code> on subsequent invocations</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(foo([<span class=\"number\">3</span>])) <span class=\"comment\"># [2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(foo([<span class=\"number\">-1</span>])) <span class=\"comment\"># [2, 3]</span></span><br></pre></td></tr></table></figure>\n<p>Why this happens because the list, being a mutable type, is still the same instance defined during function creation, but it is now populated from the interaction of the previous invocation.</p>\n<h2 id=\"General-Solution\"><a href=\"#General-Solution\" class=\"headerlink\" title=\"General Solution\"></a>General Solution</h2><p>Shift the creation from definition time to runtime.</p>\n<p><em>A Common idiom is to have the parameter default to None then check for that value in the body of the function</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(items,seq = None)</span>:</span></span><br><span class=\"line\">  seq = seq <span class=\"keyword\">or</span> []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> item &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">      seq.append(item)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> seq</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(foo([<span class=\"number\">2</span>])) <span class=\"comment\">#[2]</span></span><br><span class=\"line\">print(foo([<span class=\"number\">3</span>])) <span class=\"comment\">#[3]</span></span><br><span class=\"line\">print(foo([<span class=\"number\">-1</span>])) <span class=\"comment\">#[]</span></span><br></pre></td></tr></table></figure>\n<p><strong>Point to Remember :</strong> Don’t use mutable types as default parameters</p>\n"},{"title":"Understanding First Class Function in Python","url":"http://ankuranand.xyz/2016/04/24/FIRST-CLASS-FUNCTION-IN-PYTHON/","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>Function in Python are First- Class Objects. This means that they can be passed around and used just like any other data types. In Shorthand it’s also known as “First-class function”</p>\n<blockquote>\n<p>Some of the characteristics of First Class Object Objects ?</p>\n</blockquote>\n<ul>\n<li>Created at runtime</li>\n<li>Assigned to a variable or element in a data structure</li>\n<li>Passed as an arguments to a function</li>\n<li>Returned as the result of a function</li>\n</ul>\n<p><strong>Integers, Strings and Dictionaries are other examples of first- class objects in Python.</strong></p>\n<h2 id=\"Created-at-Runtime\"><a href=\"#Created-at-Runtime\" class=\"headerlink\" title=\"Created at Runtime\"></a>Created at Runtime</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; def factorial(n): </span><br><span class=\"line\">...  \"\"\"return n!\"\"\"</span><br><span class=\"line\">...  return 1 if n &lt; 2 else n * factorial(n - 1)</span><br><span class=\"line\">... </span><br><span class=\"line\">&gt;&gt;&gt; factorial(5)</span><br><span class=\"line\">120</span><br><span class=\"line\">&gt;&gt;&gt; factorial.__doc__</span><br><span class=\"line\">'return n!'</span><br><span class=\"line\">&gt;&gt;&gt; type(factorial)</span><br><span class=\"line\">&lt;class 'function'&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>In The above example we created a function at the runtime, <strong>doc</strong> is one of several attribute of the function objects, and factorial is an instance of function class</p>\n<h2 id=\"Assigned-to-a-variable-or-element-in-a-data-structure\"><a href=\"#Assigned-to-a-variable-or-element-in-a-data-structure\" class=\"headerlink\" title=\"Assigned to a variable or element in a data structure\"></a>Assigned to a variable or element in a data structure</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fact = factorial</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fact</span><br><span class=\"line\">&lt;function factorial at <span class=\"number\">0x7fdfb7f7fbf8</span>&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fact(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">24</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>We can assign it a variable fact and call it through that name</p>\n<h2 id=\"Returned-as-the-result-of-a-function\"><a href=\"#Returned-as-the-result-of-a-function\" class=\"headerlink\" title=\"Returned as the result of a function\"></a>Returned as the result of a function</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>map(factorial, range(<span class=\"number\">5</span>))</span><br><span class=\"line\">&lt;map object at <span class=\"number\">0x7fdfb7e93390</span>&gt;</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>In the above example we passed it to the map and it also returns a function as result, Which produces a below result when passed to list</p>\n<h2 id=\"Passed-as-an-arguments-to-a-function\"><a href=\"#Passed-as-an-arguments-to-a-function\" class=\"headerlink\" title=\"Passed as an arguments to a function\"></a>Passed as an arguments to a function</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(map(factorial, range(<span class=\"number\">5</span>)))</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">24</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n<p>Another example is the sorted built-in function: an optional key arguments lets you provide a function to be applied to each item for sorting.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = [<span class=\"string\">'Ankur'</span>, <span class=\"string\">'Anand'</span>, <span class=\"string\">'Sam'</span>, <span class=\"string\">'John'</span>, <span class=\"string\">'KK'</span>, <span class=\"string\">'I'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(name, key=len)</span><br><span class=\"line\">[<span class=\"string\">'I'</span>, <span class=\"string\">'KK'</span>, <span class=\"string\">'Sam'</span>, <span class=\"string\">'John'</span>, <span class=\"string\">'Ankur'</span>, <span class=\"string\">'Anand'</span>]</span><br></pre></td></tr></table></figure>\n<p>Custom Reverse Function used for Sorting.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse_sort</span><span class=\"params\">(word)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"string\">''' reverse the word '''</span></span><br><span class=\"line\"><span class=\"meta\">... </span> <span class=\"keyword\">return</span> word[::<span class=\"number\">-1</span>]</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>reverse_sort(<span class=\"string\">'Ankur'</span>)</span><br><span class=\"line\"><span class=\"string\">'ruknA'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted(name, key=reverse_sort)</span><br><span class=\"line\">[<span class=\"string\">'I'</span>, <span class=\"string\">'KK'</span>, <span class=\"string\">'Anand'</span>, <span class=\"string\">'Sam'</span>, <span class=\"string\">'John'</span>, <span class=\"string\">'Ankur'</span>]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"Understanding Object Mechanism in Python. Part - 1","url":"http://ankuranand.xyz/2016/04/23/Object-Mechanism-in-Python-part1/","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><blockquote>\n<p>This is first part in the series of <a href=\"/categories/Python-Object-Mechanism/\">object mechanism in python</a> and assumes that people reading this are familiar with the basic python and is comfortable in reading some C code</p>\n</blockquote>\n<p>When we say object the human mind , makes an image of this in a comparative concept but for computer, the object is actually an abstract concept. It doesn’t understand anything apart from bytes. So on computer the object is just an allocated space which may be continuous or may be discrete, and this whole region of memory is what we consider and object.</p>\n<p>In <strong>Python everything is an object</strong>, and since the python has been implemented in the ANSI C, Which is not an object- oriented language, so how the object mechanism has been achieved in python is really amazing.</p>\n<h2 id=\"PyObject\"><a href=\"#PyObject\" class=\"headerlink\" title=\"PyObject\"></a>PyObject</h2><p>Cometh the hour Cometh the <code>PyObject</code> the core of the python object mechanism. In Python, </p>\n<blockquote>\n<p>The structure of the object is on heap, <strong>exception being the <code>type object</code>,</strong> which is statically initialized</p>\n</blockquote>\n<p>objects do not float around in memory; once created and allocated the size and address of the object doesn’t change, so object that need to accommodate variable length data can only maintain a pointer to a variable-size memory region within the object as it makes the object maintenance work very simple</p>\n<h2 id=\"Understanding-PyObject\"><a href=\"#Understanding-PyObject\" class=\"headerlink\" title=\"Understanding PyObject\"></a>Understanding PyObject</h2><p>Here the structure of the <code>PyObject</code> that forms the core foundation of Python Object Mechanism. It’s defined in the <code>object.h</code> file of Python Core Library</p>\n<p><strong>For objects that does not contain variable length data</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _object &#123;</span><br><span class=\"line\">    PyObject_HEAD</span><br><span class=\"line\">&#125; PyObject;</span><br></pre></td></tr></table></figure></p>\n<p><strong>For objects that contain variable length data</strong><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    PyObject_VAR_HEAD</span><br><span class=\"line\">&#125; PyVarObject;</span><br></pre></td></tr></table></figure></p>\n<p>And the macros definition of <code>PyObject_HEAD</code> and <code>PyObject_VAR_HEAD</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* PyObject_HEAD defines the initial segment of every PyObject. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PyObject_HEAD           /</span></span><br><span class=\"line\">  _PyObject_HEAD_EXTRA        /</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ob_refcnt;          /</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> _typeobject *ob_type;</span><br></pre></td></tr></table></figure></p>\n <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PyObject_VAR_HEAD       /</span></span><br><span class=\"line\">  PyObject_HEAD           /</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ob_size; <span class=\"comment\">/* Number of items in variable part */</span></span><br></pre></td></tr></table></figure>\n<p>As it can be seen, whether it’s a variable size Python Object (<code>PyVarObject</code>) or or fixed size Python Object (<code>PyObject</code>), the <code>PyObject_HEAD</code> remains the same, and this makes the reference to objects very unified, We only need a <code>PyObject*</code> and we can reference any object.</p>\n<h2 id=\"Reference-Counting-Mechanism\"><a href=\"#Reference-Counting-Mechanism\" class=\"headerlink\" title=\"Reference Counting Mechanism\"></a>Reference Counting Mechanism</h2><p>The Integer variable <code>int ob_refcnt</code> implements the reference counting mechanism. For an object A, Whenever there is new <code>PyObject*</code> reference the reference count of A is increased, and whenever it’s is reduced the reference count should be decreased. If count reaches 0, A can be removed from the heap.</p>\n<p>For Example when we write <code>a = b = c = []</code> we create one list and give it three different names. I.e we have bounded the newly instantiated list object to three different identifiers and binding is one of the way to increase the referent’s reference count.</p>\n<p>Let’s us demonstrate this.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> ctypes</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_reference_count</span><span class=\"params\">(obj)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  <span class=\"string\">\"\"\" Function takes the object as input and returns the </span><br><span class=\"line\"><span class=\"meta\">... </span>  total number of reference count to it \"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">... </span>  <span class=\"keyword\">return</span> ctypes.c_size_t.from_address(id(obj))</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l = [<span class=\"number\">234</span>,<span class=\"number\">567</span>,<span class=\"number\">99999</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count= get_ref(l)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count</span><br><span class=\"line\">c_ulong(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l1 = l</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count</span><br><span class=\"line\">c_ulong(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> l</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>l_ref_count</span><br><span class=\"line\">c_ulong(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"PYObject-VAR-HEAD\"><a href=\"#PYObject-VAR-HEAD\" class=\"headerlink\" title=\"PYObject_VAR_HEAD\"></a>PYObject_VAR_HEAD</h2><p>For the variable length Object, the PyObject are usually container which holds the total number of elements that the container is going to contain in the <code>ob_size</code> variable</p>\n<h2 id=\"Going-Further\"><a href=\"#Going-Further\" class=\"headerlink\" title=\"Going Further\"></a>Going Further</h2><p>In Part 2<br>The Type of Object Mechanism of the PyObject_HEAD<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> _typeobject *ob_type</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Private members are not private to instance in Java","url":"http://ankuranand.xyz/2016/04/23/private-access-in-java/","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>We all know to access the private member variable of a class we need an public helper function in Java.</p>\n<h3 id=\"The-Unforeseen\"><a href=\"#The-Unforeseen\" class=\"headerlink\" title=\"The Unforeseen\"></a>The Unforeseen</h3><p>But seems One Object can access a private variable of another object of the same class.</p>\n<blockquote>\n<p>Private means “private to the class”, NOT “private to the object.<br>So two Object of the same class could access each other’s private member variable directly</p>\n</blockquote>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstClass</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> privateNum;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FirstClass</span><span class=\"params\">(<span class=\"keyword\">int</span> privateNum)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.privateNum = privateNum;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a method that will change the private variable</span></span><br><span class=\"line\">  <span class=\"comment\">// of the object that is passed as parameter</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">changeNum</span><span class=\"params\">(FirstClass Obj)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Obj.privateNum = <span class=\"number\">100</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// A working Example</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...strings)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Creating a first class object</span></span><br><span class=\"line\">    FirstClass fc1 = <span class=\"keyword\">new</span> FirstClass(<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// as we are inside the same class we can</span></span><br><span class=\"line\">    <span class=\"comment\">// access the private variable</span></span><br><span class=\"line\">    System.out.println(fc1.privateNum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// lets create a new Obect of the First class</span></span><br><span class=\"line\">    FirstClass fc2 = <span class=\"keyword\">new</span> FirstClass(<span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// changing the value of the privateNum in the fc1 instance</span></span><br><span class=\"line\">    <span class=\"comment\">// from the fc2 instance</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    fc2.changeNum(fc1);</span><br><span class=\"line\">    System.out.println(fc1.privateNum);</span><br><span class=\"line\">    <span class=\"comment\">// Hola the output is 100</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Why-we-should-know-this\"><a href=\"#Why-we-should-know-this\" class=\"headerlink\" title=\"Why we should know this\"></a>Why we should know this</h3><p>So Java private access modifier means only private for a class. The instance of this class can access the private members of another instance of that class without any helper method and this features allow us to write methods that accept an instance of the class as an arguments for <code>equals(Object other)</code>, <code>compareTo(Object other)</code> without relying on the class having non private getters for all the  private properties that need to be accessed.</p>\n<h3 id=\"Example-code-for-equals\"><a href=\"#Example-code-for-equals\" class=\"headerlink\" title=\"Example code for equals\"></a>Example code for equals</h3><p>We often write code like this while overriding the <code>equals</code> methods in Java Class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Overriding equals() to compare two FirstClass object based on the value of </span></span><br><span class=\"line\"><span class=\"comment\">// privateNum</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// If the object is compared with itself then return true  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">/* Check if o is an instance of FirstClass or not</span><br><span class=\"line\">          \"null instanceof [type]\" also returns false */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> FirstClass)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// typecast o to FirstClass so that we can compare data members </span></span><br><span class=\"line\">        FirstClass c = (FirstClass) o;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Compare the data members and return accordingly </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.privateNum == c.privateNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So remember <strong>private means private to class not to instance of that class</strong></p>\n"},{"title":"Self Note on Eulerian Path","url":"http://ankuranand.xyz/2016/04/21/eulerian-path/","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>Eulerian Path are paths that</p>\n<ol>\n<li>Start at some node</li>\n<li>Visit every node exactly once</li>\n<li>And ends</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/ankuanand/Blogs-Image/master/eulerian1.png\" alt=\"Eulerian paths\"></p>\n<p>For the above Diagram We can start at some node for example say<br>We starts at node <strong>D</strong><br>The next criteria is Visit every node exactly once</p>\n<p>In the above graph we can transverse in any manner. I’m transversing in following manner.</p>\n<blockquote>\n<p>D -&gt; B -&gt; A -&gt; D -&gt; C -&gt; A</p>\n</blockquote>\n<p>So in the above we have an Eulerian path that started at D and ended at A</p>\n<h3 id=\"Condition\"><a href=\"#Condition\" class=\"headerlink\" title=\"Condition\"></a>Condition</h3><blockquote>\n<p>If a graph is connected and have a two node with even degree, than it has an<br>Eulerian path.</p>\n</blockquote>\n<p>As seen from above example the starting and ending node D and A has an odd degree.</p>\n<p>If Graph has all odd degree that graph can’t have a Eulerian Path</p>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><blockquote>\n<p>If all the node is of even degree</p>\n</blockquote>\n<p>For example<br>The below graph has an Eulerian Path even when all of it’s node is even</p>\n<p><img src=\"https://raw.githubusercontent.com/ankuanand/Blogs-Image/master/even%20eulerian.png\" alt=\"Even Eulerian\"></p>\n<p>Transverse</p>\n<blockquote>\n<p>A -&gt; B -&gt; C -&gt; E -&gt; B -&gt; D -&gt; C -&gt; A </p>\n</blockquote>\n<p>We start and end up at the same node so the node should have a even degree<br>This is special kind of the Eulerian Path and this is known as <strong>Eulerian Tour</strong></p>\n"},{"title":"Efficient Factorial Algorithm","url":"http://ankuranand.xyz/2016/04/19/EFFICIENT-FACTORIALS-ALGORITHMS/","content":"<h2 id=\"Factorial\"><a href=\"#Factorial\" class=\"headerlink\" title=\"Factorial -\"></a>Factorial -</h2><p>In mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers<br>less than or equal to n. For example,</p>\n<p>$$ 5! = 5 \\ast 4 \\ast 3 \\ast 2 \\ast 1 = 120 $$</p>\n<h3 id=\"Recursive-Approach\"><a href=\"#Recursive-Approach\" class=\"headerlink\" title=\"Recursive Approach:\"></a>Recursive Approach:</h3><p>Based on the recurrence relation</p>\n<p>$$ n! = \\begin{cases}<br>1 &amp; \\text{if n = 0},\\<br>(n-1)! \\ast n &amp; \\text{if n &gt; 0}<br> \\end{cases} $$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_recursive</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">'''</span><br><span class=\"line\">    This function takes one agruments and</span><br><span class=\"line\">    returns the factorials of that number</span><br><span class=\"line\">    This is naive recursive approach</span><br><span class=\"line\">    '''</span></span><br><span class=\"line\">    <span class=\"comment\">#base case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">1</span> <span class=\"keyword\">or</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> number * calculate_factorial_recursive(number - <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>The Recursive approach is not the best approach. It will give RuntimeError: maximum recursion depth exceeded.<br>For large number as python doesn’t have optimized <a href=\"https://en.wikipedia.org/wiki/Tail_call\" target=\"_blank\" rel=\"external\">tail recursion</a>, but it have been written for pedagogical purposes, to illustrate the effect of several fundamental algorithmic optimizations in the n factorial of a very large number.</p>\n<h3 id=\"First-Improvement\"><a href=\"#First-Improvement\" class=\"headerlink\" title=\"First Improvement :\"></a>First Improvement :</h3><h3 id=\"Successive-Multiplicative-Approach\"><a href=\"#Successive-Multiplicative-Approach\" class=\"headerlink\" title=\"Successive Multiplicative Approach.\"></a>Successive Multiplicative Approach.</h3><p>This function uses the approach successive multiplication like<br>$$ 8! = 8 \\ast 7 \\ast 6 \\ast 5 \\ast 4 \\ast 3 \\ast 2 \\ast 1 $$</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_multi</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> number == <span class=\"number\">1</span> <span class=\"keyword\">or</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    result = <span class=\"number\">1</span> <span class=\"comment\"># variable to hold the result</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> xrange(<span class=\"number\">1</span>, number + <span class=\"number\">1</span>, <span class=\"number\">1</span>):</span><br><span class=\"line\">        result *= x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>The profiled result for this function :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n = 1000 -- Total time: 0.001115 s</span><br><span class=\"line\">for n = 10000 -- Total time: 0.035327 s</span><br><span class=\"line\">for n = 100000 -- Total time: 3.77454 s.</span><br></pre></td></tr></table></figure>\n<p>Now If we see the result from line_profiler we will see that most %time was spent in multiplication step of the above code i.e result *= x which is almost 98%.</p>\n<h3 id=\"Second-Improvement\"><a href=\"#Second-Improvement\" class=\"headerlink\" title=\"Second Improvement :\"></a>Second Improvement :</h3><h3 id=\"Reduce-the-number-of-successive-multiplication\"><a href=\"#Reduce-the-number-of-successive-multiplication\" class=\"headerlink\" title=\"Reduce the number of successive multiplication\"></a>Reduce the number of successive multiplication</h3><p>As the multiplication is very costly especially for a large number , we can use the pattern and reduces the number of multiplication by half. Lets group the above 8! example $ 8! = 8 \\ast 7 \\ast 6 \\ast 5 \\ast 4 \\ast 3 \\ast 2 \\ast 1  $- together: $ 8! = (8 \\ast 1) \\ast (7 \\ast 2) \\ast (6 \\ast 3) \\ast (5 \\ast 4) $ which can be written as $$ 8! = 8 \\ast (8 + 6 = 14) \\ast (14 + 4 = 18) \\ast (18 + 2).$$<br>so first factor is the number we are taking. second factor is the first factor plus first factor minus two from the factor and then in next we multiply the result with added result. Odd number also follows the same pattern till even just handle the case of one odd.<br>Code to do the same:<br><figure class=\"highlight python\"><figcaption><span>:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_multi_half</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> number == <span class=\"number\">1</span> <span class=\"keyword\">or</span> number == <span class=\"number\">0</span>:</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">       handle_odd = <span class=\"keyword\">False</span></span><br><span class=\"line\">       upto_number = number</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> number &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">           upto_number -= <span class=\"number\">1</span></span><br><span class=\"line\">           <span class=\"keyword\">print</span> upto_number</span><br><span class=\"line\">           handle_odd = <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">       next_sum = upto_number</span><br><span class=\"line\">       next_multi = upto_number</span><br><span class=\"line\">       factorial = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">while</span> next_sum &gt;= <span class=\"number\">2</span>:</span><br><span class=\"line\">           factorial *= next_multi</span><br><span class=\"line\">           next_sum -= <span class=\"number\">2</span></span><br><span class=\"line\">           next_multi += next_sum</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> handle_odd:</span><br><span class=\"line\">           factorial *= number</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> factorial</span><br></pre></td></tr></table></figure></p>\n<p>The profiled result for this function :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For n = 1000 -- Total time: 0.00115 s</span><br><span class=\"line\">for n = 10000 -- Total time: 0.023636 s</span><br><span class=\"line\">for n = 100000 -- Total time: 3.65019 s</span><br></pre></td></tr></table></figure>\n<p>It is not optimised very much, but are at least not obscenely slow. It’s shows some improvement in the mid range but didn’t improved much with scaling. In this function too most of the %time is spent on multiplication:<br>Java Code for the same:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">calculateFactorial</span><span class=\"params\">(<span class=\"keyword\">int</span> uptoValue)</span> </span>&#123;</span><br><span class=\"line\">        BigInteger answer=BigInteger.ONE;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> oddUptoValue=((uptoValue&amp;<span class=\"number\">1</span>)==<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tempUptoValue=uptoValue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oddUptoValue)&#123;</span><br><span class=\"line\">            tempUptoValue=uptoValue-<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextSum = tempUptoValue;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextMulti = tempUptoValue;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nextSum &gt;= <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            answer=answer.multiply(BigInteger.valueOf(nextMulti));</span><br><span class=\"line\">            nextSum -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            nextMulti += nextSum;</span><br><span class=\"line\">        <span class=\"comment\">//  long product=(tempUptoValue-i+1L)*i;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oddUptoValue)&#123;</span><br><span class=\"line\">            answer=answer.multiply(BigInteger.valueOf(uptoValue));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(answer);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Further-Improvement\"><a href=\"#Further-Improvement\" class=\"headerlink\" title=\"Further Improvement :\"></a>Further Improvement :</h3><h3 id=\"Using-prime-decomposition\"><a href=\"#Using-prime-decomposition\" class=\"headerlink\" title=\"Using prime decomposition\"></a>Using <a href=\"https://en.wikipedia.org/wiki/Integer_factorization\" target=\"_blank\" rel=\"external\">prime decomposition</a></h3><p>to reduce the total number of multiplication Since there are $$ \\frac {number} {\\ln number} $$ prime number smaller than number so we can further reduce the total number of multiplication</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_factorial_prime_decompose</span><span class=\"params\">(number)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    prime = [<span class=\"keyword\">True</span>]*(number + <span class=\"number\">1</span>)</span><br><span class=\"line\">    result = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange (<span class=\"number\">2</span>, number+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> prime[i]:</span><br><span class=\"line\">            <span class=\"comment\">#update prime table</span></span><br><span class=\"line\">            j = i+i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &lt;= number:</span><br><span class=\"line\">                prime[j] = <span class=\"keyword\">False</span></span><br><span class=\"line\">                j += i</span><br><span class=\"line\">            sum = <span class=\"number\">0</span></span><br><span class=\"line\">            t = i</span><br><span class=\"line\">            <span class=\"keyword\">while</span> t &lt;= number:</span><br><span class=\"line\">                sum += number/t</span><br><span class=\"line\">                t *= i</span><br><span class=\"line\">            result *= i**sum</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The profiled result for this function :</span><br><span class=\"line\">n = 1000 -- Total time = 0.007484 s</span><br><span class=\"line\">n = 10000 -- Total time = 0.061662 s</span><br><span class=\"line\">n = 100000 -- Total time = 2.45769 s</span><br></pre></td></tr></table></figure>\n<p>You can see the detailed profiled result of all the discussed algorithms prepared here, in case if you want to see.<br><a href=\"https://github.com/ankur-anand/Factorial-Algorithm\" target=\"_blank\" rel=\"external\">Github Link</a></p>\n"}]